// -*- mode: Java; -*-
package sanka.http;

class Query {
    private String text;
    private String[String] map;

    /**
     * Create a Query object from a URL query component like
     * key=value&key=value& where the keys and values are URL encoded.
     */
    Query(String text) {
        this.text = text;
    }

    /**
     * Create a container for key-value pairs to be added.
     */
    Query() {
        this.map = new String[class String];
    }
    
    /**
     * Get the query as a collection of decoded keys and values.
     */
    String[String] getMap() {
        if (this.map != null || this.text == null) {
            return this.map;
        }
        // Parse this.text -> this.map.
        this.map = new String[class String];
        var idx = 0;
        while (true) {
            var start = idx;
            while (this.text[idx] != '=' && this.text[idx] != 0) {
                idx++;
            }
            if (this.text[idx] == 0) {
                break;
            }
            var key = this.text.substring(start, idx);
            idx++;
            start = idx;
            while (this.text[idx] != '&' && this.text[idx] != 0) {
                idx++;
            }
            var value = this.text.substring(start, idx);
            key = URLEncoder.get().decode(key);
            value = URLEncoder.get().decode(value);
            this.map[key] = value;
            if (this.text[idx] == 0) {
                break;
            }
            idx++;
        }
        return this.map;
    }

    /**
     * Shortcut to update a single value in the map.
     */
    void set(String key, String value) {
        getMap()[key] = value;
    }

    /**
     * Return the keys and values like key=value&key=value&
     * where the keys and values are URL encoded.
     */
    String encode() {
        if (this.map == null) {
            return this.text;
        }
        var encoder = URLEncoder.get();
        var text = "";
        for (var key, value : this.map) {
            text = (text + encoder.encode(key) + "=" +
                    encoder.encode(value) + "&");
        }
        return text;
    }
}
