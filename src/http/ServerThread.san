// -*- mode: Java; -*-
package sanka.http;
import sanka.io.LineReader;
import sanka.net.Socket;

/**
 * ServerThread reads and processes HTTP requests for as long as a single
 * connection remains open.
 */
class ServerThread {

    private Socket connection;
    private HttpProcessor processor;

    ServerThread(Socket connection, HttpProcessor processor) {
        this.connection = connection;
        this.processor = processor;
    }

    void run() {
        var lineReader = new LineReader(this.connection);
        var parser = new HttpParser(lineReader);
        while (true) {
            var request = new HttpRequest();
            var requestLine = parser.parseRequestLine();
            if (requestLine == null) {
                break;
            }
            request.method = requestLine[0];
            request.uri = requestLine[1];
            request.httpVersion = requestLine[2];
            if (!parseHeaders(parser, request)) {
                System.println("bad header");
                break;
            }
            var value = request.headers[Http.CONTENT_LENGTH];
            if (value != null) {
                var contentLength = System.parseLong(value);
                request.body = new byte[contentLength];
                if (lineReader.read(request.body) < contentLength) {
                    System.println("bad body");
                    break;
                }
            }
            CookieProcessor.parseCookies(request);
            var response = new HttpResponse();
            System.println(request.method + " " + request.uri);
            this.processor.process(request, response);
            sendResponse(response);
        }
        this.connection.close();
    }

    private boolean parseHeaders(HttpParser parser, HttpRequest request) {
        while (true) {
            var header = parser.parseHeader();
            if (header == null) {
                return false;
            }
            if (header.length == 0) {
                break;
            }
            request.headers[header[0]] = header[1];
        }
        return true;
    }

    private void sendResponse(HttpResponse response) {
        var reason = StatusCodes.get().getDescription(response.status);
        var text = Http.VERSION + " " + response.status + " " + reason + "\r\n";
        if (response.headers == null || response.headers[Http.DATE] == null) {
            var date = System.formatTime(Http.RFC822_FORMAT,
                System.currentTimeMillis(), false);
            text = text + Http.DATE + ": " + date + "\r\n";
        }
        if (response.headers != null) {
            for (var field, value : response.headers) {
                text = text + field + ": " + value + "\r\n";
            }
        }
        if (response.cookies != null) {
            var headers = CookieProcessor.unparseCookies(response.cookies);
            for (var header : headers) {
                text = text + header + "\r\n";
            }
        }
        var length = response.body != null ? response.body.length : 0;
        text = text + Http.CONTENT_LENGTH + ": " +  length + "\r\n";
        text = text + "\r\n";
        var bytes = text.toByteArray();
        if (response.body != null) {
            bytes.addAll(response.body);
        }
        this.connection.write(bytes);
    }
}
