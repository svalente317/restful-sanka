// -*- mode: Java; -*-
package sanka.http;
import sanka.lang.Thread;
import sanka.net.InetAddress;
import sanka.net.Socket;

/**
 * Class to use the main thread to accept incoming http connections,
 * and start new threads to process and respond to requests.
 */
class Server {
    private int port;
    private HttpProcessor processor;
    private Socket socket;

    Server(int port, HttpProcessor processor) {
        this.port = port;
        this.processor = processor;
    }

    void run() {
        this.socket = new Socket();
        var status = this.socket.bind(this.port);
        if (status != 0) {
            close();
            System.println("bind " + this.port + ": " + System.strerror(status));
            return;
        }
        status = this.socket.listen(8);
        if (status != 0) {
            close();
            System.println("listen: " + System.strerror(status));
            return;
        }
        while (this.socket != null) {
            var connection = this.socket.accept();
            if (connection == null) {
                System.println("accept: done");
                break;
            }
            var runnable = new ServerThread(connection, this.processor);
            new Thread(runnable);
        }
        close();
    }

    void close() {
        if (this.socket != null) {
            this.socket.close();
            this.socket = null;
        }
    }
}
