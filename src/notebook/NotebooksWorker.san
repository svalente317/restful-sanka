// -*- mode: Java; -*-
package sanka.rest.notebook;
import sanka.http.Http;
import sanka.json.JsonObject;
import sanka.rest.RestOperation;
import sanka.rest.storage.CollectionWorker;

serializable class NotebookState {
    String id;
    int userId;
    String name;
    long created;
    long lastUpdate;
    String[] documentIds;
    String insertAfter;
}

serializable class NotebookCollectionState {
    NotebookState[] items;
}

class NotebooksWorker extends CollectionWorker {
    const WORKER_PATH = "/notebook/notebooks";

    NotebooksWorker() {
        setPrimaryKeyField("id");
        setPrimaryKeyGenerationPrefix("nb");
    }

    /**
     * To create a new notebook, create a new front page.
     */
    String validatePost(RestOperation op, JsonObject oldRow) {
        if (oldRow != null) {
            return validateUpdate(op, oldRow);
        }
        var state = new NotebookState();
        if (!op.parseBody(state) || state.name == null) {
            return "missing field: name";
        }
        var id = createDocument();
        if (id == null) {
            return "failed to create document";
        }
        state.userId = op.userId;
        state.created = System.currentTimeMillis();
        state.lastUpdate = state.created;
        state.documentIds = new String[]{ id };
        op.setBody(state);
        return null;
    }

    /**
     * To update an existing notebook, validate that the user owns the
     * documents, and create new pages as requested.
     */
    private String validateUpdate(RestOperation op, JsonObject oldRow) {
        var state = new NotebookState();
        if (!op.parseBody(state)) {
            return "bad post body";
        }
        var current = new NotebookState();
        current.fromJson(oldRow);
        state.userId = op.userId;
        if (state.name == null) {
            state.name = current.name;
        }
        if (state.created == 0) {
            state.created = current.created;
        }
        else if (state.created != current.created) {
            return "cannot change notebook created time";
        }
        state.lastUpdate = System.currentTimeMillis();
        if (state.insertAfter != null) {
            if (state.documentIds == null) {
                state.documentIds =
                    insertAfter(current.documentIds, state.insertAfter);
            }
            state.insertAfter = null;
        }
        if (state.documentIds == null) {
            state.documentIds = current.documentIds;
            op.setBody(state);
            return null;
        }
        var currentIds = new boolean[class String];
        for (var documentId : current.documentIds) {
            currentIds[documentId] = true;
        }
        for (var idx = 0; idx < state.documentIds.length; idx++) {
            var id = state.documentIds[idx];
            if (id == "") {
                id = createDocument();
                if (id == null) {
                    return "failed to create document";
                }
                state.documentIds[idx] = id;
            } else {
                if (currentIds.remove(id)) {
                    continue;
                }
                if (!validateDocument(id, op.userId)) {
                    return "illegal document specified in notebook";
                }
            }
        }
        // Documents that remain in currentIds must be garbage collected.
        op.setBody(state);
        return null;
    }

    private String[] insertAfter(String[] arr, String target) {
        var newarr = new String[arr.length+1];
        var found = false;
        var idx = 0;
        for (var item : arr) {
            newarr[idx] = item;
            idx++;
            if ((!found) && (item == target)) {
                found = true;
                newarr[idx] = "";
                idx++;
            }
        }
        return found ? newarr : null;
    }

    /**
     * Post to DocumentsWorker and return new document id.
     */
    private String createDocument() {
        var docState = new DocumentState();
        var op = send(Http.POST, DocumentsWorker.WORKER_PATH, docState);
        if (!op.success()) {
            return null;
        }
        op.parseBody(docState);
        return docState.id;
    }

    /**
     * Validate that the given documentId exists and is owned by the current
     * user.
     */
    private boolean validateDocument(String id, int userId) {
        var path = DocumentsWorker.WORKER_PATH + "/" + id;
        var op = send(Http.GET, DocumentsWorker.WORKER_PATH, null);
        if (!op.success()) {
            return false;
        }
        var docState = new DocumentState();
        return op.parseBody(docState) && docState.userId == userId;
    }
}
