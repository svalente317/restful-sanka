// -*- mode: Java; -*-
package sanka.rest.notebook;
import sanka.http.Http;
import sanka.json.JsonElement;
import sanka.json.JsonObject;
import sanka.rest.CollectionWorker;
import sanka.rest.RestOperation;
import sanka.sqlite3.FieldDesc;

serializable class NotebookState {
    int id;
    int userId;
    String name;
    long created;
    long lastUpdate;
    int[] documentIds;
    int generation;
}

class NotebooksWorker extends CollectionWorker {
    const WORKER_PATH = "/notebooks";

    NotebooksWorker() {
        var fields = new FieldDesc[]{
            new FieldDesc("id", JsonElement.INT_TYPE),
            new FieldDesc("userId", JsonElement.INT_TYPE),
            new FieldDesc("name", JsonElement.STRING_TYPE),
            new FieldDesc("created", JsonElement.INT_TYPE),
            new FieldDesc("lastUpdate", JsonElement.INT_TYPE),
            new FieldDesc("documentIds", JsonElement.ARRAY_TYPE),
            new FieldDesc("generation", JsonElement.INT_TYPE)
        };
        setTableSchema("notebooks", "id", fields, true);
    }

    void onPost(RestOperation op) {
        if (op.key != null) {
            super.onPost(op);
            return;
        }
        var state = new NotebookState();
        if (!op.parseBody(state) || state.name == null) {
            op.setErrorBody("missing field: name");
            return;
        }
        // To create a new notebook, create a new front page.
        var docState = new DocumentState();
        var subOp = send(Http.POST, DocumentsWorker.WORKER_PATH, docState);
        if (!subOp.success()) {
            op.setFrom(subOp);
            return;
        }
        subOp.parseBody(docState);
        state.userId = op.userId;
        state.created = System.currentTimeMillis();
        state.lastUpdate = state.created;
        state.documentIds = new int[]{ docState.id };
        op.setBody(state);
        super.onPost(op);
    }

    String validatePost(RestOperation op, JsonObject row, JsonObject oldRow) {
        // TODO validate notebook post
        return null;
    }
}
