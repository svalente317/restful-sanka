// -*- mode: Java; -*-
package sanka.xml;
import sanka.io.Reader;

class XmlParser {
    c__include "expat.h";
    c__include "sanka_expat.h";

    /**
     * Parse an XML document as a stream.
     *
     * An XML document is made up of elements, where each element has a
     * start tag and an end tag, and each start tag can have a list of
     * attributes, between the start and end tags can be raw data as well
     * as nested elements.
     *
     * All of this data is passed to the "processor" methods.
     *
     * Unfortunately, due to a quirk in the XML parser, a single element's
     * data may be split across multiple calls to processor.handleData().
     *
     * "encoding" may be null. Note that each XML document defines how it
     * is encoded. If you specify a non-null encoding, you are not telling
     * the parser how to interpret the data in the document. Rather, you
     * are telling the parser how to present the data to "processor".
     * If the distinction is not clear, then don't worry about it.
     */
    void parse(Reader reader, String encoding, XmlProcessor processor) {
        c__stmt "XML_Parser parser = XML_ParserCreate(encoding)";
        c__stmt "if (parser == NULL) return";
        c__stmt "XML_SetUserData(parser, processor)";
        c__stmt "XML_SetElementHandler(parser, XML_START, XML_END)";
        c__stmt "XML_SetCharacterDataHandler(parser, XML_DATAHANDLER)";
        var buffer = new byte[8192];
        while (true) {
            var len = reader.read(buffer);
            if (len < 0) {
                System.println("read error");
                break;
            }
            var error = false;
            c__stmt "error = (XML_Parse(parser, buffer->data, len, (len == 0)) == XML_STATUS_ERROR)";
            if (error) {
                var lineNumber = 0;
                var description = "";
                c__stmt "lineNumber = XML_GetCurrentLineNumber(parser)";
                c__stmt "description = XML_ErrorString(XML_GetErrorCode(parser))";
                System.println("line " + lineNumber + ": " + description);
                break;
            }
        }
        c__stmt "XML_ParserFree(parser)";
    }
}

