// -*- mode: Java; -*-
package sanka.rest.storage;
import sanka.lang.Mutex;

class LockState {
    int writeCount;
    int readCount;
}

/**
 * Class to provide read (shared) locks and write (exclusive) locks on keys.
 */
class LockManager {
    private Mutex mutex;
    private map[String]LockState locks;

    LockManager() {
        this.mutex = new Mutex();
        this.locks = new map[String]LockState;
    }

    boolean lock(String key, boolean write) {
        var error = this.mutex.lock();
        if (error != 0) {
            return false;
        }
        var result = false;
        var state = this.locks[key];
        if (state == null) {
            state = new LockState();
            this.locks[key] = state;
        }
        if (write) {
            if (state.writeCount == 0 && state.readCount == 0) {
                state.writeCount++;
                result = true;
            }
        } else {
            if (state.writeCount == 0) {
                state.readCount++;
                result = true;
            }
        }
        this.mutex.unlock();
        return result;
    }

    boolean unlock(String key, boolean write) {
        var error = this.mutex.lock();
        if (error != 0) {
            return false;
        }
        var result = false;
        var state = this.locks[key];
        if (state != null) {
            if (write) {
                if (state.writeCount > 0) {
                    state.writeCount--;
                    result = true;
                }
            } else {
                if (state.readCount > 0) {
                    state.readCount--;
                    result = true;
                }
            }
            if (state.writeCount == 0 && state.readCount == 0) {
                this.locks.remove(key);
            }
        }
        this.mutex.unlock();
        return result;
    }

    /**
     * Call lock(). If it fails, then sleep briefly and try again.
     *
     * TODO Count the number of threads waiting per key.
     * If the count is too high, then drain the queue: make all waitLock()
     * loops on the key immediately return false.
     */
    boolean waitLock(String key, boolean write) {
        // Start with a wait time of 1 millisecond. Keep falling back
        // until we get to, let's say, 10 seconds.
        var period = 1;
        while (period < 10000) {
            if (lock(key, write)) {
                return true;
            }
            System.sleep(period);
            period = period * 2;
        }
        return false;
    }
}
