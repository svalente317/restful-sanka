// -*- mode: Java; -*-
package sanka.rest.storage;
import sanka.http.Http;
import sanka.http.Query;
import sanka.io.File;
import sanka.io.FileReader;
import sanka.io.FileWriter;
import sanka.json.JsonElement;
import sanka.json.JsonObject;
import sanka.rest.RestWorker;
import sanka.rest.RestOperation;
import sanka.util.Random;

class StorageWorker extends RestWorker {
    const WORKER_PATH = "/storage";
    const STORAGE_ROOT_PREF = "storage.root";
    const STORAGE_PEER_PREF = "storage.peer";
    const DEFAULT_ROOT_DIRECTORY = "/tmp/rest-storage";
    const STAGE_DIRECTORY = ".stage";
    const STORAGE_KEY = "storageKey";
    const GENERATION = "generation";
    const COLLECTION = ".collection";
    const TRUE = "true";
    const RESOURCE_FILENAME = "#resource";

    const MAX_COLLECTION_TOTAL_SIZE = 16 * 1024 * 1024;

    private LockManager lockManager;
    private File rootDirectory;
    private File stageDirectory;
    private String peerUrl;

    void onStart() {
        var root = getConfig(STORAGE_ROOT_PREF);
        if (root == null) {
            root = DEFAULT_ROOT_DIRECTORY;
        }
        this.lockManager = new LockManager();
        this.rootDirectory = new File(root);
        this.rootDirectory.mkdirs();
        this.stageDirectory = new File(this.rootDirectory, STAGE_DIRECTORY);
        this.stageDirectory.mkdirs();
        this.peerUrl = getConfig(STORAGE_PEER_PREF);
    }

    /**
     * Write the given object to storage.
     */
    void onPost(RestOperation op) {
        var obj = op.getJsonBody();
        if (obj == null) {
            op.setErrorBody("invalid body");
            return;
        }
        var storageKey = obj.getString(STORAGE_KEY);
        if (storageKey == null) {
            op.setErrorBody("missing field: " + STORAGE_KEY);
            return;
        }
        if (!validateKey(storageKey)) {
            op.setErrorBody("invalid " + STORAGE_KEY);
            return;
        }
        var generation = obj.getInt(GENERATION);
        if (generation < 0) {
            op.setErrorBody("invalid " + GENERATION);
            return;
        }
        if (!this.lockManager.waitLock(storageKey, true)) {
            op.setErrorBody("failed to lock key: " + storageKey);
            return;
        }
        var failed = false;
        var currentObj = readJsonObject(storageKey);
        if (currentObj == null) {
            if (generation == 0) {
                obj.setInt(GENERATION, 1);
            }
        } else {
            var currentGeneration = currentObj.getInt(GENERATION);
            if (generation == 0) {
                obj.setInt(GENERATION, currentGeneration+1);
            } else if (generation <= currentGeneration) {
                op.setErrorBody("invalid " + GENERATION +
                    ". current is " + currentGeneration);
                failed = true;
            }
        }
        if (!failed) {
            postToStorageLog(op, storageKey);
            writeJsonObject(storageKey, obj);
            op.setJsonBody(obj);
            postToStorageSender(op);
        }
        this.lockManager.unlock(storageKey, true);
    }

    /**
     * Valid key:
     * starts with slash. does not end with slash.
     * 1 or more components separated by slashes
     * each component is 1 to 80 characters
     * component does not start with a dot
     * alphanumerics, dash, dot, underscore
     */
    private boolean validateKey(String key) {
        var length = key.length();
        var start = 0;
        if (key[0] != '/') {
            return false;
        }
        for (var idx = 1; idx <= length; idx++) {
            if (idx == length || key[idx] == '/') {
                var componentLen = idx - (start+1);
                if (componentLen == 0 || componentLen > 80) {
                    return false;
                }
                if (key[start+1] == '.') {
                    return false;
                }
                start = idx;
            } else {
                var ch = key[idx];
                var ok = ((ch >= 'a' && ch <= 'z') ||
                          (ch >= 'A' && ch <= 'Z') ||
                          (ch >= '0' && ch <= '9') ||
                          (ch == '-' || ch == '.' || ch == '_'));
                if (!ok) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Read the object stored under the given key.
     */
    byte[] readBytes(String storageKey) {
        var directory = new File(this.rootDirectory, storageKey);
        var file = new File(directory, RESOURCE_FILENAME);
        var reader = new FileReader();
        if (reader.open(file.getPath()) != 0) {
            return null;
        }
        return reader.readFile();
    }

    /**
     * Write the object to storage under the given key.
     */
    void writeBytes(String storageKey, byte[] bytes) {
        var file = new File(this.stageDirectory, Random.randomUuid());
        var writer = new FileWriter();
        if (writer.open(file.getPath()) != 0) {
            return;
        }
        writer.write(bytes);
        writer.close();
        var directory = new File(this.rootDirectory, storageKey);
        directory.mkdirs();
        var destFile = new File(directory, RESOURCE_FILENAME);
        file.renameTo(destFile);
    }

    /**
     * Delete the object stored under the given key.
     */
    boolean deleteBytes(String storageKey) {
        var directory = new File(this.rootDirectory, storageKey);
        var file = new File(directory, RESOURCE_FILENAME);
        return file.delete();
    }

    JsonObject readJsonObject(String storageKey) {
        var bytes = readBytes(storageKey);
        if (bytes == null) {
            return null;
        }
        return JsonObject.parse(new String(bytes));
    }

    void writeJsonObject(String storageKey, JsonObject obj) {
        writeBytes(storageKey, obj.toString().toByteArray());
    }

    /**
     * Read the queried object from storage.
     */
    void onGet(RestOperation op) {
        var storageKey = null;
        if (op.query != null) {
            storageKey = op.query.getMap()[STORAGE_KEY];
        }
        if (storageKey == null) {
            op.setErrorBody("missing query: " + STORAGE_KEY);
            return;
        }
        if (!validateKey(storageKey)) {
            op.setErrorBody("invalid " + STORAGE_KEY);
            return;
        }
        if (op.query.getMap()[COLLECTION] == TRUE) {
            onGetCollection(op, storageKey);
            return;
        }
        if (!this.lockManager.waitLock(storageKey, false)) {
            op.setErrorBody("failed to lock key: " + storageKey);
            return;
        }
        var bytes = readBytes(storageKey);
        this.lockManager.unlock(storageKey, false);
        if (bytes == null) {
            op.setErrorBody("not found: " + storageKey);
            op.status = Http.NOT_FOUND;
            return;
        }
        op.setRawBody(bytes);
    }

    /**
     * Read a collection from storage. A collection is the direct children
     * of a storage key; it does not recursively traverse the collection.
     *
     * This is intended to be used with relatively small resources.
     * For example, it makes sense to read a collection of resources where
     * each resource represents a book by title, author, etc., but without
     * the book contents. So the entire response is limited to 16 MB.
     *
     * The response is a JsonObject with a field named "items" with a JsonArray
     * of each resource as a JsonObject.
     */
    void onGetCollection(RestOperation op, String storageKey) {
        // Check if the request is to filter the collection on any fields.
        var queryMap = op.query.getMap();
        queryMap.remove(STORAGE_KEY);
        queryMap.remove(COLLECTION);

        // Read the filenames from the filesystem. These are the files that
        // we will try to read and return, even if files are added and removed
        // in the directory after we start reading the files.
        var directory = new File(this.rootDirectory, storageKey);
        var filenames = directory.list();
        if (filenames == null) {
            filenames = new String[0];
        }

        // Lock the resources. I believe that this is safe from deadlock
        // because these locks are shared, and because the worker never holds
        // any other locks while it holds a single exclusive lock on anything.
        var resourceKeys = new String[filenames.length];
        var idx = 0;
        for (var filename : filenames) {
            var resourceKey = storageKey + "/" + filename;
            if (this.lockManager.waitLock(resourceKey, false)) {
                resourceKeys[idx] = resourceKey;
                idx++;
            }
        }
        resourceKeys.setLength(idx);
        System.sort(resourceKeys);

        // Read and unlock the resources.
        var collection = new String[resourceKeys.length];
        var totalSize = 0;
        idx = 0;
        for (var resourceKey : resourceKeys) {
            var bytes = null;
            var text = null;
            if (totalSize < MAX_COLLECTION_TOTAL_SIZE) {
                bytes = readBytes(resourceKey);
            }
            this.lockManager.unlock(resourceKey, false);
            if (bytes != null) {
                text = new String(bytes);
                if (queryMap.size() > 0) {
                    var jsonObject = JsonObject.parse(text);
                    if (!filterMatch(jsonObject, queryMap)) {
                        text = null;
                    }
                }
            }
            if (text != null) {
                collection[idx] = text;
                idx++;
                totalSize = totalSize + bytes.length;
            }
        }
        collection.setLength(idx);

        // Build the response.
        var body = "{\"items\":[";
        var comma = "";
        for (var text : collection) {
            body = body + comma + text;
            comma = ",";
        }
        body = body + "]}";
        op.setStringBody(body);
    }

    /**
     * @return true if the given object contains all of the queried fields
     *         with all of the queried values.
     */
    private boolean filterMatch(JsonObject object, String[String] queryMap) {
        for (var key, value : queryMap) {
            var element = object.get(key);
            if (element == null) {
                return false;
            }
            var evalue = element.type == JsonElement.STRING_TYPE ?
                element.getAsString() : element.toString();
            if (evalue != value) {
                return false;
            }
        }
        return true;
    }

    /**
     * Delete an object from storage.
     */
    void onDelete(RestOperation op) {
        // After deleting the storageKey, if a new item is posted with this
        // key, it will start over at generation 1 again. This could
        // unintended effects. Of course, when a collection worker uses
        // auto-generated primary keys, it will never reuse a deleted key.

        var storageKey = null;
        if (op.query != null) {
            storageKey = op.query.getMap()[STORAGE_KEY];
        }
        if (storageKey == null) {
            op.setErrorBody("missing query: " + STORAGE_KEY);
            return;
        }
        if (!validateKey(storageKey)) {
            op.setErrorBody("invalid " + STORAGE_KEY);
            return;
        }
        if (!this.lockManager.waitLock(storageKey, false)) {
            op.setErrorBody("failed to lock key: " + storageKey);
            return;
        }
        postToStorageLog(op, storageKey);
        var deleted = deleteBytes(storageKey);
        if (deleted) {
            postToStorageSender(op);
        }
        this.lockManager.unlock(storageKey, false);
        if (!deleted) {
            op.setErrorBody("not found: " + storageKey);
            op.status = Http.NOT_FOUND;
            return;
        }
    }

    /**
     * Post a log message indicating that we are about to save a new resource
     * with the given key. This is for crash recovery. If the system dies
     * before the resource has been sent to our peer for replication,
     * then the log message will tell us to send it when we restart.
     */
    private void postToStorageLog(RestOperation op, String storageKey) {
        if (this.peerUrl == null) {
            return;
        }
        if (op.source == StorageReceiverWorker.WORKER_PATH) {
            return;
        }
        var state = new StorageLogPostState();
        state.operation = op.method == Http.DELETE ?
            StorageLogWorker.DELETE_OPERATION :
            StorageLogWorker.CREATE_OPERATION;
        state.storageKey = storageKey;
        send(Http.POST, StorageLogWorker.WORKER_PATH, state);
    }

    /**
     * Post to StorageSender worker that this resource has been saved locally,
     * so it should use a background thread to try to replicate it to our
     * peer. StorageSender will write the necessary log message after
     * the resource has been replicated.
     */
    private void postToStorageSender(RestOperation op) {
        if (this.peerUrl == null) {
            return;
        }
        if (op.source == StorageReceiverWorker.WORKER_PATH) {
            return;
        }
        var outgoing = new RestOperation();
        outgoing.method = op.method;
        outgoing.path = StorageSenderWorker.WORKER_PATH;
        outgoing.query = op.query;
        outgoing.setRawBody(op.getBody());
        sendOperation(outgoing);
    }
}
