// -*- mode: Java; -*-
package sanka.rest.storage;
import sanka.http.Http;
import sanka.http.HttpClient;
import sanka.http.Query;
import sanka.http.URL;
import sanka.lang.Channel;
import sanka.lang.Thread;
import sanka.rest.RestOperation;
import sanka.rest.RestWorker;

serializable class StorageSenderWorkerState {
    URL receiverUrl;
    int queueSize;
    long lastSuccess;
    boolean isFailing;
}

class StorageSenderWorker extends RestWorker {
    const WORKER_PATH = "/storage-sender";
    const MAX_QUEUE_SIZE = 1000;

    /**
     * URL of peer StorageReceiver, etc.
     */
    private StorageSenderWorkerState state;

    /**
     * Channel for communication between the worker and background thread.
     * This is the queue of storageKeys of the resources that need to be
     * replicated.
     */
    private Channel channel;

    /**
     * Cache of recently posted resources. When the background thread is
     * ready to transmit a resource, it looks for the resource by key in
     * this cache. If the key is not found, then get the current value of
     * the resource directly from storage.
     */
    private StorageCache cache;

    private Thread backgroundThread;

    void onStart() {
        var peerUrl = getConfig(StorageWorker.STORAGE_PEER_PREF);
        if (peerUrl == null) {
            return;
        }
        var path = StorageReceiverWorker.WORKER_PATH;
        if (peerUrl.endsWith("/")) {
            path = path.substring(1);
        }
        this.state = new StorageSenderWorkerState();
        this.state.receiverUrl = new URL(peerUrl + path);
        this.channel = new Channel(MAX_QUEUE_SIZE);
        this.cache = new StorageCache();
        this.backgroundThread = new Thread(this);
    }

    void onPost(RestOperation op) {
        if (this.state.receiverUrl == null) {
            op.setErrorBody("worker disabled");
            return;
        }
        var obj = op.getJsonBody();
        if (obj == null) {
            op.setErrorBody("invalid body");
            return;
        }
        var storageKey = obj.getString(StorageWorker.STORAGE_KEY);
        if (storageKey == null) {
            op.setErrorBody("missing field: " + StorageWorker.STORAGE_KEY);
            return;
        }
        this.cache.put(storageKey, op.getBody());
        this.channel.push(storageKey);
        op.setBody(null);
    }

    /**
     * Run the background thread. Send resources that the worker adds to the
     * queue.
     *
     * TODO. Keep HttpClient open. Send multiple HTTP requests over a single
     * connection. Use a timer to close the connection after sufficient idle
     * time.
     */
    void run() {
        while (true) {
            var storageKey = this.channel.pop();
            if (storageKey == null) {
                break;
            }
            var body = null;
            body = this.cache.remove(storageKey);
            if (body == null) {
                body = getResourceFromStorage(storageKey);
            }
            if (body == null) {
                continue;
            }
            sendToPeerWithRetry(body);
            this.state.lastSuccess = System.currentTimeMillis();
            this.state.isFailing = false;
            postToStorageLog(storageKey);
        }
    }

    /**
     * Send the given resource to our peer. Do not return until the post
     * has been accepted.
     */
    private void sendToPeerWithRetry(byte[] body) {
        var sleepTime = 1;
        while (true) {
            var sender = new HttpClient();
            var ok = sender.send(this.state.receiverUrl, Http.POST, body);
            sender.close();
            if (ok && sender.status == Http.OK) {
                return;
            }
            System.println("status code " + sender.status);
            // Use exponential backoff.
            // Sleep for periods from 1 second to 64 seconds.
            this.state.isFailing = true;
            System.println("sleep for " + sleepTime + " seconds");
            System.sleep(sleepTime * 1000);
            if (sleepTime < 60) {
                sleepTime = sleepTime * 2;
            }
        }
    }

    private byte[] getResourceFromStorage(String storageKey) {
        var storageOp = new RestOperation();
        storageOp.method = Http.GET;
        storageOp.path = StorageWorker.WORKER_PATH;
        storageOp.query = new Query();
        storageOp.query.set(StorageWorker.STORAGE_KEY, storageKey);
        sendOperation(storageOp);
        if (!storageOp.success()) {
            return null;
        }
        return storageOp.getBody();
    }

    /**
     * Post a log message indicating that the resource has been replicated,
     * so that if this process crashes, we won't try to replicate the
     * resource on restart.
     */
    private void postToStorageLog(String storageKey) {
        var state = new StorageLogPostState();
        state.operation = StorageLogWorker.REPLICATED_OPERATION;
        state.storageKey = storageKey;
        send(Http.POST, StorageLogWorker.WORKER_PATH, state);
    }

    /**
     * Expose the current state of the worker.
     */
    void onGet(RestOperation op) {
        if (this.channel != null) {
            this.state.queueSize = this.channel.getQueueSize();
        }
        op.setBody(this.state);
    }
}
