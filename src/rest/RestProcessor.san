// -*- mode: Java; -*-
package sanka.rest;
import sanka.http.Http;
import sanka.http.HttpParser;
import sanka.http.HttpRequest;
import sanka.http.HttpResponse;
import sanka.http.Query;
import sanka.http.URL;
import sanka.http.URLEncoder;
import sanka.json.JsonElement;
import sanka.json.JsonObject;

interface HttpAuthenticator {
    boolean authenticate(HttpRequest request, RestOperation op);
}

/**
 * RestProcessor is basically a registrar. Initially, you tell it which
 * RestWorkers service which namespaces. Then, the various subsystems,
 * including the http server, tell it to tell the appropriate RestWorker
 * to process a RestOperation.
 */
class RestProcessor {
    const INSTANCE_NAME_PREF = "instanceName";

    String instanceName;
    private JsonObject configuration;
    private map[String]RestWorker workerMap;
    private map[String]boolean isStarted;
    private []HttpAuthenticator authenticators;

    RestProcessor(JsonObject configuration) {
        this.configuration = configuration;
        this.workerMap = new map[String]RestWorker;
        this.isStarted = new map[String]boolean;
        this.authenticators = new []HttpAuthenticator;
        this.instanceName = getConfig(INSTANCE_NAME_PREF);
    }

    String getConfig(String key) {
        return this.configuration.getString(key);
    }

    JsonElement getConfigElement(String key) {
        return this.configuration.get(key);
    }

    void register(String path, RestWorker worker) {
        worker.setRestProcessor(this, path);
        this.workerMap[path] = worker;
    }

    void addAuthenticator(HttpAuthenticator instance) {
        this.authenticators.add(instance);
    }

    void start() {
        while (true) {
            var startCount = 0;
            for (var path, worker : this.workerMap) {
                if (this.isStarted[path]) {
                    continue;
                }
                var deps = worker.getDependencies();
                if (!allStarted(deps)) {
                    continue;
                }
                System.println("start " + path);
                worker.onStart();
                this.isStarted[path] = true;
                startCount++;
            }
            if (startCount == 0) {
                break;
            }
        }
        for (var path, worker : this.workerMap) {
            if (!this.isStarted[path]) {
                System.println("FAILED: " + path);
            }
        }
    }

    boolean allStarted([]String deps) {
        if (deps != null) {
            for (var path : deps) {
                if (!this.isStarted[path]) {
                    return false;
                }
            }
        }
        return true;
    }

    void process(HttpRequest request, HttpResponse response) {
        var url = new URL().setRequestUri(request.uri);
        var op = new RestOperation();
        op.method = request.method;
        op.path = url.path;
        op.query = url.query == null ? null : new Query(url.query);
        op.setRawBody(request.body);
        for (var instance : this.authenticators) {
            if (instance.authenticate(request, op)) {
                break;
            }
        }
        processOperation(op);
        response.status = op.status;
        response.headers = op.headers;
        response.cookies = op.cookies;
        response.body = op.getBody();
    }

    void processOperation(RestOperation op) {
        var path = op.path;
        var worker = this.workerMap[path];
        if (worker == null) {
            var idx = path.lastIndexOf('/');
            if (idx > 0) {
                var parentPath = path.substring(0, idx);
                var key = path.substring(idx+1);
                worker = this.workerMap[parentPath];
                if (worker != null) {
                    if (worker.isCollection()) {
                        op.key = key;
                    } else {
                        worker = null;
                    }
                }
            }
        }
        if (worker == null) {
            op.setErrorBody("not found: " + URLEncoder.get().encode(path));
            op.status = Http.NOT_FOUND;
            return;
        }
        op.status = Http.OK;
        if (worker.onOperation(op)) {
            return;
        }
        switch (op.method) {
        case Http.GET:
            worker.onGet(op);
            break;
        case Http.POST:
            worker.onPost(op);
            break;
        case Http.DELETE:
            worker.onDelete(op);
            break;
        default:
            op.setErrorBody("invalid method: " +
                URLEncoder.get().encode(op.method));
            op.status = Http.METHOD_NOT_ALLOWED;
            break;
        }
    }
}
