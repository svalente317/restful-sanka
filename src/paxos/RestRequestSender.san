// -*- mode: Java; -*-
package sanka.rest.paxos;
import sanka.lang.Channel;
import sanka.lang.Thread;
import sanka.rest.RestClient;
import sanka.rest.RestOperation;

class RestRequestSender {
    private map[String]Channel hostChannelMap;

    RestRequestSender() {
        this.hostChannelMap = new map[String]Channel;
    }

    /**
     * Send the operation asynchronoously. When the operation is complete,
     * push the completed operation into responseChannel.
     */
    void send(RestOperation op, Channel responseChannel) {
        var key = op.url.hostname;
        if (op.url.port > 0) {
            key = key + ":" + op.url.port;
        }
        var channel = this.hostChannelMap[key];
        if (channel == null) {
            System.println("create sender thread for " + key);
            channel = new Channel(0);
            new Thread(new SenderRunnable(channel));
            this.hostChannelMap[key] = channel;
        }
        channel.push(new SendPair(op, responseChannel));
    }

    void close() {
        for (var key, channel : this.hostChannelMap) {
            channel.close();
        }
    }
}

class SendPair {
    RestOperation op;
    Channel responseChannel;

    SendPair(op, responseChannel);
}

class SenderRunnable {
    private Channel channel;

    SenderRunnable(channel);

    void run() {
        System.println("SenderRunnable start");
        while (true) {
            var pair = (SendPair) this.channel.pop();
            if (pair == null) {
                break;
            }
            RestClient.send(pair.op);
            pair.responseChannel.push(pair.op);
        }
        System.println("SenderRunnable end");
    }
}
