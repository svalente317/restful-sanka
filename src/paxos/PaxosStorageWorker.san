// -*- mode: Java; -*-
package sanka.rest.paxos;
import sanka.http.Http;
import sanka.http.Query;
import sanka.http.URL;
import sanka.io.File;
import sanka.io.FileReader;
import sanka.io.FileWriter;
import sanka.json.JsonElement;
import sanka.json.JsonObject;
import sanka.lang.Channel;
import sanka.rest.RestWorker;
import sanka.rest.RestOperation;
import sanka.rest.storage.StorageWorker;

class PaxosStorageWorker extends RestWorker {
    const WORKER_PATH = "/paxos/storage";
    const STORAGE_PEERS_PREF = "storagePeers";

    const STORAGE_KEY = "storageKey";
    const GENERATION = "generation";

    private URL[] peerURLs;
    private RestRequestSender requestSender;

    void onStart() {
        var element = getConfigElement(STORAGE_PEERS_PREF);
        if (element != null) {
            var array = element.getAsArray();
            if (array != null) {
                this.peerURLs = new URL[0];
                for (var elem : array) {
                    var text = elem.getAsString();
                    if (text != null) {
                        text = join(text, PaxosVoterWorker.WORKER_PATH);
                        this.peerURLs.add(new URL(text));
                    }
                }
                this.requestSender = new RestRequestSender();
            }
        }
    }

    private static String join(String prefix, String suffix) {
        return (prefix.endsWith("/") && suffix.startsWith("/")) ?
            (prefix + suffix.substring(1)) : (prefix + suffix);
    }

    /**
     * Write the given object to storage.
     */
    void onPost(RestOperation op) {
        if (this.requestSender == null) {
            op.setErrorBody("system not configured");
            return;
        }
        var obj = op.getJsonBody();
        if (obj == null) {
            op.setErrorBody("invalid body");
            return;
        }
        var storageKey = obj.getString(STORAGE_KEY);
        if (storageKey == null) {
            op.setErrorBody("missing field: " + STORAGE_KEY);
            return;
        }
        var generation = obj.getInt(GENERATION);
        if (generation <= 0) {
            op.setErrorBody("missing or invalid field: " + GENERATION);
            return;
        }
        var request = new PaxosPrepareRequest();
        request.storageKey = storageKey;
        request.generation = generation;
        request.nonce = NonceGenerator.generateNonce();

        var total = 1 + this.peerURLs.length;
        var responseChannel = new Channel(total);
        for (var url : this.peerURLs) {
            var remoteOp = new RestOperation();
            remoteOp.url = url;
            remoteOp.method = Http.POST;
            remoteOp.setBody(request);
            this.requestSender.send(remoteOp, responseChannel);
        }

        var localOp = send(Http.POST, PaxosVoterWorker.WORKER_PATH, request);
        responseChannel.push(localOp);

        var nonceMap = new int[class String];
        var majority = 1 + (total >> 1);
        var responseCount = 0;
        var failureCount = 0;
        var currentGeneration = 0;
        var responseBody = new PaxosPrepareRequest();
        while (currentGeneration == 0 && responseCount < total) {
            var response = (RestOperation) responseChannel.pop();
            if (response == null) {
                op.setErrorBody("internal error");
                return;
            }
            responseCount++;
            if (!response.success() || !response.parseBody(responseBody)) {
                log("prepare failed with status " + response.status);
                failureCount++;
                if (failureCount >= majority) {
                    op.setErrorBody("prepare request failed");
                    return;
                }
            } else {
                var responseGeneration = responseBody.generation;
                log("prepare response with generation " + responseGeneration);
                var count = nonceMap[responseBody.nonce] + 1;
                nonceMap[responseBody.nonce] = count;
                if (count >= majority) {
                    currentGeneration = responseGeneration;
                    log(storageKey + " current generation is " + currentGeneration);
                }
                else if ((responseGeneration >= generation) &&
                         (count + failureCount >= majority)) {
                    currentGeneration = responseGeneration;
                    log(storageKey + " current generation may be " + currentGeneration);
                }
            }
        }
        if (currentGeneration >= generation) {
            op.setErrorBody(storageKey + ": current generation is " + currentGeneration);
            return;
        }
        if (currentGeneration == 0) {
            // The responses and failures were distributed to indicate that no
            // higher generation has ever been fully accepted.
            log(storageKey + " current generation is in transition");
        }
        phase2(op, request.nonce);
    }

    private void phase2(RestOperation op, String nonce) {
        var request = new PaxosWriteRequest();
        request.nonce = nonce;
        request.resource = op.getJsonBody();

        var total = 1 + this.peerURLs.length;
        var responseChannel = new Channel(total);
        for (var url : this.peerURLs) {
            var remoteOp = new RestOperation();
            remoteOp.url = url;
            remoteOp.method = Http.POST;
            remoteOp.setBody(request);
            this.requestSender.send(remoteOp, responseChannel);
        }

        var localOp = send(Http.POST, PaxosVoterWorker.WORKER_PATH, request);
        responseChannel.push(localOp);

        var majority = 1 + (total >> 1);
        var responseCount = 0;
        var accepted = 0;
        var rejected = 0;
        while (responseCount < total && accepted < majority && rejected < majority) {
            var response = (RestOperation) responseChannel.pop();
            if (response == null) {
                op.setErrorBody("internal error");
                return;
            }
            responseCount++;
            if (response.success()) {
                log("write request accepted");
                accepted++;
            } else {
                log("write request failed with status " + response.status);
                rejected++;
            }
        }
        if (accepted < majority) {
            op.setErrorBody("write failed");
            return;
        }
        log("write ok");
    }

    /**
     * Read the queried object from storage.
     */
    void onGet(RestOperation op) {
        if (this.requestSender == null) {
            op.setErrorBody("system not configured");
            return;
        }
        var storageKey = null;
        if (op.query != null) {
            storageKey = op.query.getMap()[STORAGE_KEY];
        }
        if (storageKey == null) {
            op.setErrorBody("missing query: " + STORAGE_KEY);
            return;
        }

        var query = new Query();
        query.set(STORAGE_KEY, storageKey);
        var total = 1 + this.peerURLs.length;
        var responseChannel = new Channel(total);
        for (var url : this.peerURLs) {
            var remoteOp = new RestOperation();
            remoteOp.url = new URL(url.scheme, url.hostname, url.port, url.path,
                                   query.encode());
            remoteOp.method = Http.GET;
            this.requestSender.send(remoteOp, responseChannel);
        }

        var localOp = new RestOperation();
        localOp.method = Http.GET;
        localOp.path = PaxosVoterWorker.WORKER_PATH;
        localOp.query = query;
        sendOperation(localOp);
        responseChannel.push(localOp);

        var nonceMap = new int[class String];
        var majority = 1 + (total >> 1);
        var responseCount = 0;
        var rejected = 0;
        var selectedOp = null;
        var responseBody = new PaxosResourceState();
        while (selectedOp == null && responseCount < total) {
            var response = (RestOperation) responseChannel.pop();
            if (response == null) {
                op.setErrorBody("internal error");
                return;
            }
            responseCount++;
            if ((response.success() && response.parseBody(responseBody)) ||
                (response.status == Http.NOT_FOUND)) {
                var nonce = response.success() ? responseBody.nonce : "";
                var count = nonceMap[nonce] + 1;
                nonceMap[nonce] = count;
                if (count >= majority) {
                    selectedOp = response;
                }
            } else {
                rejected++;
                if (rejected >= majority) {
                    selectedOp = response;
                }
            }
        }
        if (selectedOp == null) {
            // We received at least one old value and at least one new value.
            // Assume that the old value is being replaced by the new value.
            // TODO Sleep briefly and then try again.
            op.setErrorBody("no majority found");
            return;
        }
        if (!selectedOp.success()) {
            // Either the majority of peers agreed that this storageKey is undefined
            // (never been saved), or the majority failed to response.
            op.setFrom(selectedOp);
            return;
        }
        // Discard the counting metadata, and return the saved resource.
        selectedOp.parseBody(responseBody);
        if (responseBody == null || responseBody.resource == null) {
            op.setErrorBody("internal error parsing resource");
            return;
        }
        op.setJsonBody(responseBody.resource);
    }

    private void log(String s) {
        System.println(s);
    }
}
