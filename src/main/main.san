// -*- mode: Java; -*-
package sanka.rest.main;
import sanka.http.Server;
import sanka.sqlite3.Database;
import sanka.rest.Globals;
import sanka.rest.RestProcessor;
import sanka.rest.examples.DirectoryCollectionWorker;
import sanka.rest.examples.EchoWorker;
import sanka.rest.examples.ReverseWorker;
import sanka.rest.notebook.DocumentContentWorker;
import sanka.rest.notebook.DocumentHistoryWorker;
import sanka.rest.notebook.DocumentsWorker;
import sanka.rest.notebook.NotebooksWorker;
import sanka.rest.notebook.UsersWorker;
import sanka.rest.storage.StorageWorker;

/**
 * Start a REST server listening on port 8888.
 * Register EchoWorker and ReverseWorker.
 * Register Notebook workers.
 *
 * -p port
 * -d database: run database worker. Store DB in specified file.
 */
class RestfulSanka {
    const USAGE = "Usage: restful-server [-p port] [-d database]";

    static int main(String[] argv) {
        var port = 8888;
        var dbFile = "/tmp/restful-sanka.db";
        var error = false;
        for (var idx = 1; idx < argv.length; idx++) {
            switch (argv[idx]) {
            case "-p":
                idx++;
                port = System.parseInt(argv[idx]);
                break;
            case "-d":
                idx++;
                dbFile = argv[idx];
                break;
            default:
                error = true;
                break;
            }
        }
        if (error) {
            System.println(USAGE);
            return -1;
        }
        var database = null;
        if (dbFile != null) {
            database = new Database(dbFile);
            var status = database.getStatus();
            if (status != 0) {
                System.println(dbFile + ": sqlite3 status " + status);
            } else {
                Globals.setDatabase(database);
            }
        }
        var processor = new RestProcessor();
        processor.register(EchoWorker.WORKER_PATH,
                           new EchoWorker());
        processor.register(ReverseWorker.WORKER_PATH,
                           new ReverseWorker());
        processor.register(StorageWorker.WORKER_PATH,
                           new StorageWorker());
        processor.register(DocumentContentWorker.WORKER_PATH,
                           new DocumentContentWorker());
        processor.register(DocumentHistoryWorker.WORKER_PATH,
                           new DocumentHistoryWorker());
        processor.register(DocumentsWorker.WORKER_PATH,
                           new DocumentsWorker());
        processor.register(NotebooksWorker.WORKER_PATH,
                           new NotebooksWorker());
        processor.register(UsersWorker.WORKER_PATH,
                           new UsersWorker());
        var server = new Server();
        server.listen(port, processor);
        if (database != null) {
            database.close();
        }
        return 0;
    }
}
