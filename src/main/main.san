// -*- mode: Java; -*-
package sanka.rest.main;
import sanka.http.Server;
import sanka.rest.RestProcessor;
import sanka.rest.examples.DirectoryCollectionWorker;
import sanka.rest.examples.EchoWorker;
import sanka.rest.examples.ReverseWorker;
import sanka.rest.examples.UsersWorker;
import sanka.rest.notebook.DocumentContentWorker;
import sanka.rest.notebook.DocumentHistoryWorker;
import sanka.rest.notebook.DocumentsWorker;
import sanka.rest.notebook.NotebooksWorker;
import sanka.rest.storage.PrimaryKeyWorker;
import sanka.rest.storage.StorageWorker;

/**
 * Start a REST server listening on port 8888.
 * Register EchoWorker and ReverseWorker.
 * Register Notebook workers.
 */
class RestfulSanka {
    const USAGE = "Usage: restful-server [-p port]";

    static int main(String[] argv) {
        var port = 8888;
        var error = false;
        for (var idx = 1; idx < argv.length; idx++) {
            switch (argv[idx]) {
            case "-p":
                idx++;
                port = System.parseInt(argv[idx]);
                break;
            default:
                error = true;
                break;
            }
        }
        if (error) {
            System.println(USAGE);
            return -1;
        }
        var processor = new RestProcessor();
        processor.register(StorageWorker.WORKER_PATH,
                           new StorageWorker());
        processor.register(PrimaryKeyWorker.WORKER_PATH,
                           new PrimaryKeyWorker());
        processor.register(EchoWorker.WORKER_PATH,
                           new EchoWorker());
        processor.register(ReverseWorker.WORKER_PATH,
                           new ReverseWorker());
        processor.register(UsersWorker.WORKER_PATH,
                           new UsersWorker());

        processor.register(DocumentContentWorker.WORKER_PATH,
                           new DocumentContentWorker());
        processor.register(DocumentHistoryWorker.WORKER_PATH,
                           new DocumentHistoryWorker());
        processor.register(DocumentsWorker.WORKER_PATH,
                           new DocumentsWorker());
        processor.register(NotebooksWorker.WORKER_PATH,
                           new NotebooksWorker());
        processor.start();
        var server = new Server();
        server.listen(port, processor);
        return 0;
    }
}
