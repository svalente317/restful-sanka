// -*- mode: Java; -*-
package sanka.rest.main;
import sanka.http.Server;
import sanka.io.File;
import sanka.json.JsonObject;
import sanka.json.JsonParser;
import sanka.rest.RestProcessor;
import sanka.rest.auth.LoginWorker;
import sanka.rest.auth.SessionsWorker;
import sanka.rest.auth.UsersWorker;
import sanka.rest.examples.EchoWorker;
import sanka.rest.examples.ReverseWorker;
import sanka.rest.examples.DirectoryCollectionWorker;
import sanka.rest.notebook.DocumentContentWorker;
import sanka.rest.notebook.DocumentHistoryWorker;
import sanka.rest.notebook.DocumentsWorker;
import sanka.rest.notebook.NotebooksWorker;
import sanka.rest.notebook.SelectNotebookWorker;
import sanka.rest.notebook.ViewNotebookWorker;
import sanka.rest.storage.PrimaryKeyWorker;
import sanka.rest.storage.StorageLogWorker;
import sanka.rest.storage.StorageReceiverWorker;
import sanka.rest.storage.StorageSenderWorker;
import sanka.rest.storage.StorageWorker;
import sanka.util.Random;

/**
 * Start a REST server listening on port 8888.
 * Register EchoWorker and ReverseWorker.
 * Register Notebook workers.
 */
class RestfulSanka {
    const USAGE = "Usage: restful-sanka [-p port] [-d storage]";
    const DEFAULT_PORT = 8888;

    static int main([]String argv) {
        Random.seedRandom();
        var port = 0;
        var storageRoot = null;
        var error = false;
        for (var idx = 1; idx < argv.length; idx++) {
            switch (argv[idx]) {
            case "-p":
                idx++;
                port = System.parseInt(argv[idx]);
                break;
            case "-d":
                idx++;
                storageRoot = argv[idx];
                break;
            default:
                error = true;
                break;
            }
        }
        if (error) {
            System.println(USAGE);
            return -1;
        }

        var home = System.getenv("HOME");
        var file = new File(new File(home), ".restful-sanka.conf");
        var element = JsonParser.parseFile(file.getPath());
        var configuration = element == null ? new JsonObject() :
            element.getAsObject();
        if (storageRoot != null) {
            configuration.setString(StorageWorker.STORAGE_ROOT_PREF, storageRoot);
        }

        if (port == 0) {
            port = configuration.getInt("port");
        }
        if (port == 0) {
            port = DEFAULT_PORT;
        }

        var processor = new RestProcessor(configuration);

        processor.register(StorageLogWorker.WORKER_PATH,
                           new StorageLogWorker());
        processor.register(StorageWorker.WORKER_PATH,
                           new StorageWorker());
        processor.register(StorageReceiverWorker.WORKER_PATH,
                           new StorageReceiverWorker());
        processor.register(StorageSenderWorker.WORKER_PATH,
                           new StorageSenderWorker());
        processor.register(PrimaryKeyWorker.WORKER_PATH,
                           new PrimaryKeyWorker());

        processor.register(LoginWorker.WORKER_PATH,
                           new LoginWorker());
        processor.register(SessionsWorker.WORKER_PATH,
                           new SessionsWorker());
        processor.register(UsersWorker.WORKER_PATH,
                           new UsersWorker());

        processor.register(EchoWorker.WORKER_PATH,
                           new EchoWorker());
        processor.register(ReverseWorker.WORKER_PATH,
                           new ReverseWorker());

        processor.register(DocumentContentWorker.WORKER_PATH,
                           new DocumentContentWorker());
        processor.register(DocumentHistoryWorker.WORKER_PATH,
                           new DocumentHistoryWorker());
        processor.register(DocumentsWorker.WORKER_PATH,
                           new DocumentsWorker());
        processor.register(NotebooksWorker.WORKER_PATH,
                           new NotebooksWorker());
        processor.register(ViewNotebookWorker.WORKER_PATH,
                           new ViewNotebookWorker());
        processor.register(SelectNotebookWorker.WORKER_PATH,
                           new SelectNotebookWorker());

        var exports = configuration.getArray("exports");
        if (exports != null) {
            for (var elem: exports) {
                var directory = elem.getAsString();
                var wkr = new DirectoryCollectionWorker(directory);
                var idx = directory.lastIndexOf('/');
                var path = directory.substring(idx);
                processor.register(path, wkr);
            }
        }

        processor.start();
        var server = new Server(port, processor);
        server.run();
        return 0;
    }
}
