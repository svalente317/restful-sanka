// -*- mode: Java; -*-
package sanka.rest.auth;
import sanka.http.Cookie;
import sanka.http.Http;
import sanka.rest.RestWorker;
import sanka.rest.RestOperation;

class LoginWorker extends RestWorker {
    const WORKER_PATH = "/auth/login";
    const SESSION_COOKIE_NAME = "session";
    const REDIRECT_KEY = "redirect";

    /**
     * If the request is not authenticated, then respond with a challenge
     * for Basic authentication. Technically, the challenge should contain
     * a "realm" parameter. We don't worry about this minor bug because
     * we really shouldn't use Basic authentication anyway.
     *
     * If the request is authenticated, then create and return a new cookie
     * for a session for the authenticated user.
     */
    void onGet(RestOperation op) {
        if (op.userId == null) {
            op.status = Http.UNAUTHORIZED;
            op.addHeader(Http.WWW_AUTHENTICATE, Http.BASIC);
            op.setBody(null);
            return;
        }
        var session = new SessionState();
        session.cookie = generateCookie();
        session.userId = op.userId;
        session.created = System.currentTimeMillis();
        var subOp = send(Http.POST, SessionsWorker.WORKER_PATH, session);
        if (!subOp.success()) {
            op.setFrom(subOp);
            return;
        }
        subOp.parseBody(session);
        var cookie = new Cookie();
        cookie.name = SESSION_COOKIE_NAME;
        cookie.value = session.cookie;
        cookie.path = "/notebook/";
        op.addCookie(cookie);
        op.setStringBody("{\"usedId\": \"" + op.userId + "\"}");
        if (op.query != null) {
            var location = op.query.getMap()[REDIRECT_KEY];
            if (location != null) {
                // TODO verify location
                op.status = Http.FOUND;
                op.addHeader(Http.LOCATION, location);
            }
        }
    }

    private String generateCookie() {
        var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
            "abcdefghijklmnopqrstuvwxyz0123456789-";
        var length = alphabet.length();
        var data = new byte[](22);
        for (var idx = 0; idx < data.length; idx++) {
            data[idx] = alphabet[System.random(length)];
        }
        return new String(data);
    }

    /**
     * Help other workers to redirect to LoginWorker when appropriate.
     */
    static boolean isAuthenticated(RestOperation op) {
        if (op.userId != null) {
            return true;
        }
        var location = WORKER_PATH + "?" + REDIRECT_KEY + "=" + op.path;
        op.status = Http.FOUND;
        op.addHeader(Http.LOCATION, location);
        op.setRawBody(null);
        return false;
    }
}
