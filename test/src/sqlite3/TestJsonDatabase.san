// -*- mode: Java; -*-
package sanka.sqlite3;
import sanka.io.File;
import sanka.json.JsonElement;
import sanka.json.JsonObject;
import sanka.test.BaseTest;
import sanka.util.Random;

// Create this table for testing:
//
// text bool  intr  ft   arr    x y
// t1
// t2   true  17    1.1  [2, 4] 1 1
// t3   false            [3, 5] 2 1
// t4                           2 2

class TestJsonDatabase extends BaseTest {

    void testJsonDatabase() {

        var schema = new FieldDesc[]{
            new FieldDesc("text", JsonElement.STRING_TYPE),
            new FieldDesc("bool", JsonElement.BOOLEAN_TYPE),
            new FieldDesc("intr", JsonElement.INT_TYPE),
            new FieldDesc("ft", JsonElement.DOUBLE_TYPE),
            new FieldDesc("arr", JsonElement.ARRAY_TYPE),
            new FieldDesc("x", JsonElement.INT_TYPE),
            new FieldDesc("y", JsonElement.INT_TYPE)
        };
        var table = new JsonTable("tableName", "text", false, schema);

        var filename = "/tmp/" + Random.randomUuid();
        var database = new Database(filename);
        assert(database.getStatus() == 0, "failed to create database");
        var jdb = new JsonDatabase(database);

        var status = jdb.createTable(table);
        assert(status == 0, "createTable failed");

        // Idempotent call to createTable() should not affect anything.
        status = jdb.createTable(table);

        var s = "{\"text\":\"t1\"}";
        var obj = JsonObject.parse(s);
        status = jdb.insertRow(table, obj);
        assert(status == 0, "t1 failed");

        s = "{\"ft\":1.1, \"arr\":[2,4], \"intr\":17, \"bool\":true, " +
            "\"text\":\"t2\", \"x\":1, \"y\":1}";
        obj = JsonObject.parse(s);
        status = jdb.insertRow(table, obj);
        assert(status == 0, "t2 failed");

        s = "{\"text\":\"t3\", \"bool\":false, \"arr\":[3,5], " +
            "\"x\":2, \"y\":1}";
        obj = JsonObject.parse(s);
        status = jdb.insertRow(table, obj);
        assert(status == 0, "t3 failed");

        s = "{\"text\":\"t4\", \"x\":2, \"y\":2}";
        obj = JsonObject.parse(s);
        status = jdb.insertRow(table, obj);
        assert(status == 0, "t3 failed");

        // Verify that we inserted 4 rows and we can select them.
        verify(jdb, table, null, new String[]{ "t1", "t2", "t3", "t4" });

        // Verify that we can select single rows by single values.
        verify(jdb, table, "text", new JsonElement().makeString("t4"), "t4");
        verify(jdb, table, "bool", new JsonElement().makeBoolean(true), "t2");
        verify(jdb, table, "bool", new JsonElement().makeBoolean(false), "t3");
        verify(jdb, table, "intr", new JsonElement().makeInt(17), "t2");
        verify(jdb, table, "ft", new JsonElement().makeDouble(1.1), "t2");

        // Verify that "x=2" finds 2 rows, "x=2 and y=1" finds 1 row,
        // "x=2 and y=0" finds 0 rows.
        obj = new JsonObject();
        obj.setInt("x", 2);
        verify(jdb, table, obj, new String[]{ "t3", "t4" });
        obj.setInt("y", 1);
        verify(jdb, table, obj, new String[]{ "t3" });
        obj.setInt("y", 0);
        verify(jdb, table, obj, new String[0]);
        
        database.close();
        new File(filename).delete();
    }

    private void verify(JsonDatabase jdb, JsonTable table,
                        JsonObject obj, String[] keys) {
        var iter = jdb.selectRows(table, obj);
        for (var idx = 0; idx < keys.length; idx++) {
            obj = iter.next();
            assert(obj != null && obj.getString("text") == keys[idx],
                   "failed to select " + keys[idx]);
        }
        obj = iter.next();
        assert(obj == null, "too many rows");
    }

    private void verify(JsonDatabase jdb, JsonTable table,
                        String field, JsonElement value, String key) {
        var obj = new JsonObject();
        obj.set(field, value);
        verify(jdb, table, obj, new String[]{ key });
    }

    static int main(String[] argv) {
        Random.seedRandom();
        var test = new TestJsonDatabase();
        test.testJsonDatabase();
        return test.exit();
    }
}

// TODO test autogenerated primary key
// TODO test updateRow()
