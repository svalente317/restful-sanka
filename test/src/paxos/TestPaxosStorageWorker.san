// -*- mode: Java; -*-
package sanka.rest.paxos;
import sanka.http.Http;
import sanka.http.HttpClient;
import sanka.http.Query;
import sanka.http.Server;
import sanka.http.URL;
import sanka.json.JsonElement;
import sanka.json.JsonObject;
import sanka.lang.Thread;
import sanka.rest.BaseRestTest;
import sanka.rest.RestOperation;
import sanka.rest.RestProcessor;
import sanka.rest.storage.StorageWorker;
import sanka.rest.storage.StorageItem;
import sanka.util.Random;

class TestPaxosStorageWorker extends BaseRestTest {
    const BASE_PORT = 9000;

    /**
     * Test replicated updates with concurrency.
     */
    void testReplicationWithConcurrency() {

        var servers = new Server[3];
        var directories = new String[3];
        for (var idx = 0; idx < 3; idx++) {
            var port = BASE_PORT + idx;
            var configuration = new JsonObject();
            var peers = new JsonElement[0];
            for (var other = 0; other < 3; other++) {
                if (idx != other) {
                    var addr = "http://localhost:" + (BASE_PORT+other);
                    peers.add(new JsonElement().makeString(addr));
                }
            }
            directories[idx] = "/tmp/storage-" + port + "-" + Random.randomUInt();
            configuration.setString(RestProcessor.INSTANCE_NAME_PREF, "i" + idx);
            configuration.setString(StorageWorker.STORAGE_ROOT_PREF, directories[idx]);
            configuration.setArray(PaxosStorageWorker.STORAGE_PEERS_PREF, peers);
            var processor = new RestProcessor(configuration);
            registerStorageWorkers(processor);
            processor.register(PaxosVoterWorker.WORKER_PATH, new PaxosVoterWorker());
            processor.register(PaxosStorageWorker.WORKER_PATH, new PaxosStorageWorker());
            processor.start();
            servers[idx] = new Server(port, processor);
            new Thread(servers[idx]);
        }

        var storageKey = "/a/b/c";
        var requestSender = new RestRequestSender();
        var stats = new int[3];
        for (var generation = 1; generation <= 300; generation++) {
            System.println("--- GENERATION " + generation + " ---");
            var responseChannel = new Channel(3);
            for (var idx = 0; idx < 3; idx++) {
                var item = new StorageItem();
                item.storageKey = storageKey;
                item.generation = generation;
                item.content = Random.randomUuid();
                var op = new RestOperation();
                op.url = new URL("http", "localhost", BASE_PORT+idx,
                                 PaxosStorageWorker.WORKER_PATH, null);
                op.method = Http.POST;
                op.setBody(item);
                requestSender.send(op, responseChannel);
            }
            var ops = new RestOperation[]{
                (RestOperation) responseChannel.pop(),
                (RestOperation) responseChannel.pop(),
                (RestOperation) responseChannel.pop()};
            var winner = -1;
            var winnerCount = 0;
            var loserCount = 0;
            for (var op : ops) {
                if (op.success()) {
                    winnerCount++;
                    winner = op.url.port - BASE_PORT;
                } else {
                    loserCount++;
                }
            }
            assertEquals(1, winnerCount, "must have 1 winner per generation");
            assertEquals(2, loserCount, "must have 2 losers per generation");
            stats[winner] = stats[winner] + 1;

            //var query = new Query();
            //query.set(StorageWorker.STORAGE_KEY, storageKey);
            //var op = sendQuery(queryProcessor, PaxosStorageWorker.WORKER_PATH, query);
            // System.println("op success=" + op.success() + " / " + op.getStringBody());
        }
        for (var idx = 0; idx < 3; idx++) {
            System.println("stats[" + idx + "]=" + stats[idx]);
        }
        requestSender.close();
        for (var server : servers) {
            server.close();
        }
        for (var directory : directories) {
            removeDirectory(directory);
        }
    }

    static int main(String[] argv) {
        Random.seedRandom();
        var test = new TestPaxosStorageWorker();
        test.testReplicationWithConcurrency();
        return test.exit();
    }
}
